/**
* Namf_Communication
* AMF Communication Service Â© 2019, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.1.0.alpha-1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * PresenceInfo.h
 *
 * 
 */

#ifndef PresenceInfo_H_
#define PresenceInfo_H_


#include "Ecgi.h"
#include "Ncgi.h"
#include "Tai.h"
#include <string>
#include "PresenceState.h"
#include "GlobalRanNodeId.h"
#include <vector>
#include <nlohmann/json.hpp>

namespace oai {
namespace amf {
namespace model {

/// <summary>
/// 
/// </summary>
class  PresenceInfo
{
public:
    PresenceInfo();
    virtual ~PresenceInfo();

    void validate();

    /////////////////////////////////////////////
    /// PresenceInfo members

    /// <summary>
    /// 
    /// </summary>
    std::string getPraId() const;
    void setPraId(std::string const& value);
    bool praIdIsSet() const;
    void unsetPraId();
    /// <summary>
    /// 
    /// </summary>
    PresenceState getPresenceState() const;
    void setPresenceState(PresenceState const& value);
    bool presenceStateIsSet() const;
    void unsetPresenceState();
    /// <summary>
    /// 
    /// </summary>
    std::vector<Tai>& getTrackingAreaList();
    bool trackingAreaListIsSet() const;
    void unsetTrackingAreaList();
    /// <summary>
    /// 
    /// </summary>
    std::vector<Ecgi>& getEcgiList();
    bool ecgiListIsSet() const;
    void unsetEcgiList();
    /// <summary>
    /// 
    /// </summary>
    std::vector<Ncgi>& getNcgiList();
    bool ncgiListIsSet() const;
    void unsetNcgiList();
    /// <summary>
    /// 
    /// </summary>
    std::vector<GlobalRanNodeId>& getGlobalRanNodeIdList();
    bool globalRanNodeIdListIsSet() const;
    void unsetGlobalRanNodeIdList();

    friend void to_json(nlohmann::json& j, const PresenceInfo& o);
    friend void from_json(const nlohmann::json& j, PresenceInfo& o);
protected:
    std::string m_PraId;
    bool m_PraIdIsSet;
    PresenceState m_PresenceState;
    bool m_PresenceStateIsSet;
    std::vector<Tai> m_TrackingAreaList;
    bool m_TrackingAreaListIsSet;
    std::vector<Ecgi> m_EcgiList;
    bool m_EcgiListIsSet;
    std::vector<Ncgi> m_NcgiList;
    bool m_NcgiListIsSet;
    std::vector<GlobalRanNodeId> m_GlobalRanNodeIdList;
    bool m_GlobalRanNodeIdListIsSet;
};

}
}
}

#endif /* PresenceInfo_H_ */
